#!/bin/bash

function main {

#file descriptor #9 is our verbose output, all superfluous information goes there
if [[ "$1" == "verbose" ]]; then
	shift
	exec 9>&1
else
	exec 9>/dev/null
fi

#ssync command
mainarg="$1"
shift

#root is required for almost all commands
assert_root

callname="$( basename "${BASH_SOURCE[0]}" )"
script_path="/usr/bin/ssync"
config_path="/etc/ssync.conf"
config_template_path="/usr/share/ssync/ssync.conf.template"

#check config file or offer template
check_properly_configured

#config valid, load them!
source "$config_path"
permfile="ssync-file-permissions"
linkindex="ssync-linkindex"

#if setup complete check proper access
check_setup

#alright, let's get to work and process the ssync command
case "$mainarg" in
	setup)
		sync_setup "$1";;
	uninstall)
		sync_uninstall;;
	fix)
		sync_fix;;
	add|rm|check)
		let c_ok=0 c_fail=0

		#loop over arguments if multiple files given/globbed
		while : ; do
			#normalize: calculate resolved non-repo path and strip repo
			fullpath="$(realpath --quiet --canonicalize-missing --no-symlinks "$1")"
			fullpath="${fullpath##"$syncrepo/files"}"

			if [[ -z "$fullpath" ]]; then
				errecho "ERROR, no path given!"
				helphint && exit 1
			fi

			#execute and record status message
			case "$mainarg" in
				add) sync_add "$fullpath";;
				rm) sync_rm "$fullpath";;
				check) sync_check "$fullpath";;
			esac
			if [[ "$?" != "0" ]]; then ((c_fail++)); else ((c_ok++)); fi
			shift
			[[ "$1" ]] || break
		done

		if [[ "$mainarg" != "check" ]]; then
			if ((c_ok + c_fail > 1 && c_fail > 0)); then
				errecho "[!] Multiple files given: $c_ok ok, $c_fail failed"
			fi
		fi

		((c_fail == 0))
		;;
	commit)
		sync_commit "$1";;
	links)
		sync_links;;
	status)
		sync_status;;
	log)
		sync_log;;
	update)
		sync_update;;
	publish)
		sync_publish;;
	reset)
		sync_reset;;
	git)
		case "$1" in
			override)
				shift
				git "$@"
				;;
			diff|log|shortlog|show|status)
				cd "$syncrepo" && git "$@"
				;;
			*)
				errecho "AVOID THESE GIT COMMANDS TO KEEP SSYNC WORKING PROPERLY.\nUse the designated ssync commands instead:"
				helphint
				errecho "If you are absolutely sure about what you are doing:\n    ssync git override $1 ..."
				exit 1
				;;
		esac
		;;
	help)
		usagehelp;;
	*)
		usagehelp && exit 1;;
esac

}


##############################################################
####################   SETUP AND HELPERS  ####################
##############################################################

function errecho {
	echo -e "$1" 1>&2
}

function assert_root {
	#make sure user is root unless help or simple querying commands are called
	if [[ $EUID -ne 0 ]] && ! [[ "$mainarg" =~ ^help|check|status|log|links$ ]]; then
		errecho "This must be run as root."
		exit 1
	fi
}

function check_properly_configured {
	#look if config file exists and differs from template, otherwise copy it and display explanation
	if ( test ! -f "$config_path" ) || ( cmp -s "$config_template_path" "$config_path" >/dev/null ); then
		cp "$config_template_path" "$config_path"
		echo "Welcome to ssync!
 A default configuration was copied to $config_path
 Edit this file and restart this setup by using
     ssync setup
 to pull the ssync repository from GITURL or even
     ssync setup new
 for first use of this tool ever (this initializes a fresh repo and pushes it upstream)."
	exit 1
	fi
}

function check_setup {
	if [[ "$mainarg" =~ ^help|setup$ ]]; then
		#calling help or setup does not require setup
		return 0
	fi

	#setup is complete if local git repo exists
	if ! [[ -e "$syncrepo/.git" ]]; then
		errecho "ERROR: Setup not completed."
		helphint && exit 1
	fi

	check_branch "$machinebranch"
}

function helphint {
	errecho " => $callname help"
}

function usagehelp () {
	echo "
USAGE: $callname [verbose] COMMAND

COMMANDS:
    setup [new]
          Initializes ssync. If config file is not found a template is created
          and the user is prompted to edit it and execute this command again.
          Adding the \"new\" option creates the necessary repository structures
          and pushes them to an empty git repository with the specified GITURL,
          otherwise it is simply cloned.

    add PATH
          Move file or folder to repository to enable synchronization. This
          creates a symlink in its original place.

    rm PATH
          Unlink element in repository and restore original file/folder. It is
          not possible to remove children of a linked parent folder.

    check PATH
          Query if path is part of repository.

    status
          Display changes since last commit (added or removed entries).

    commit [MESSAGE]
          Bundle changes in a commit for synchronization.

    reset
          Discard all uncommitted changes.

    update
          Fetch latest changes from central repository and merge them.

    publish
          Publish local changes/merges. Automatically updates first.

    links
          List paths of all repository elements.

    uninstall
          Restore (see \"rm\" command) all contents and delete local repository.

    git ...
          Pipe git command through to underlying git."
}

function ask_confirm {
	#query user for positive confirmation, has a timeout which returns failure
	local message="$1" answer

	while [[ ! "$answer" =~ ^[yYnN]$ ]]; do
		if ! read -r -n 1 -p "$message [y/n]: " -t 99 answer < /dev/tty; then
			answer="n"
			echo -n "$answer (chosen by timeout)"
		fi
		echo
	done

	if [[ "$answer" =~ ^[yY]$ ]]; then return 0; else return 1; fi
}


##############################################################
####################    CORE FUNCTIONS    ####################
##############################################################

function is_gpg_enabled {
	#is gpgkey configured in config file?
	if [[ ! -z "$gpgkey" ]]; then return 0; else return 1; fi
}

function gpg_check {
	#makes sure given git reference is trusted
	local testedref="$1"

	if is_gpg_enabled; then
		echo -n "GPG check for $testedref... "
		if ! git verify-commit "$testedref" 2>&9; then
			errecho "\n########## GPG TRUST FAIL! ##########"
			exit 1
		else
			echo "ok"
		fi
	fi
	return 0
}

function is_indexed {
	#is given entry in index file?
	local matches

	matches="$(grep --count --fixed-strings --line-regexp "$2" "$1")"
	case "$matches" in
		"0") return 42;;
		"1") return 0;;
		*) errecho "WARNING: $1 corrupt. Duplicate entries!"; return 0;;
	esac
}

function add_to_index {
	#adds entry to sorted index file
	local indexfile="$1" location="$2"

	if is_indexed "$indexfile" "$location"; then
		errecho "WARNING: Attempt to add already index entry to $1"
	else
		echo "$location" | LC_ALL=C sort -o "$indexfile" - "$indexfile"
	fi
}

function remove_from_index {
	#deletes entry from index file
	local indexfile="$1" location="$2" tmpindex

	if ! is_indexed "$indexfile" "$location"; then
		errecho "WARNING: Attempt to remove non-indexed entry from $indexfile"
	else
		#temporary copy to modify index itself
		tmpindex="$(mktemp)"
		cp "$indexfile" "$tmpindex"
		grep --invert-match --fixed-strings --line-regexp "$location" "$tmpindex" > "$indexfile"
		rm "$tmpindex"
	fi
}

function is_child_of {
	#tests if a path is a child of another path, normalized to non-repo path
	local child="$1" parent="$2" reduced

	#resolve links
	child="$(readlink -m "$child")"
	parent="$(readlink -m "$parent")"
	
	#strip repo if currently synced
	child="${child##"$syncrepo/files"}"
	parent="${parent##"$syncrepo/files"}"

	#remove base from path and see if path has changed (check for starting slash to account for partial directory names having been removed)
	reduced="${child##"$parent"}"
	if [[ "$reduced" != "$child" ]] && [[ "$reduced" == /* ]]; then return 0; else return 1; fi
}

function is_in_repo {
	#is path versioned in repo?
	local tested="$1" line

	while read line; do
		if [[ "$tested" == "$line" ]]; then
			echo "In repository index: $tested" >&9
			return 0
		elif is_child_of "$tested" "$line"; then
			echo "Parent in repository: $line" >&9
			return 0
		fi
	done <"$syncrepo/$linkindex"
	return 1
}

function has_child_in_repo {
	#are children of this path versioned in repo?
	local parent="$1" line

	while read line; do
		if is_child_of "$line" "$parent"; then
			echo "Child in repository: $line" >&9
			return 0
		fi
	done <"$syncrepo/$linkindex"
	return 1
}

function add_clone_link {
	#creates a repo-pointing link (and necessary parent directories)
	local original="$1" link="$2"

	mkdir -p "$(dirname "$link")"
	{ echo -n "Creating link: " >&9 \
	&& ln --symbolic --verbose -- "$original" "$link" >&9 \
	&& return 0; } || return 1
}

function is_index_changed {
	if [[ -z "$(cd "$syncrepo" && git status --porcelain "$linkindex")" ]]; then return 1; else return 0; fi
}

function save_permissions {
	#saves versioned files' permissions to permission index
	local line hit

	#edge case: no files versioned yet
	if [[ ! -e "$syncrepo/files" ]]; then return 0; fi

	cd "$syncrepo"
	while read -u 3 line; do
		#gitignored files wont be synced so avoid recording their stats
		if ! git check-ignore --quiet "$line"; then
			hit="${line##"$syncrepo/files"}"
			#make absolutely sure that this file is wanted
			#probably not necessary at this point, tbh...
			if is_in_repo "$hit" 9>/dev/null; then
				#no dereferencing to get versioned symlinks' permissions as well
				echo "$(stat --printf="%04a:%U:%G" "$line"):$hit"
			fi
		fi
	done 3< <(find -P "$syncrepo/files" -mindepth 1 | LC_ALL=C sort) > "$syncrepo/$permfile"
}

function restore_permissions {
	#restores versioned files' permissions from permission index
	local mod user group location

	echo "Adjusting permissions..."
	while IFS=: read -u 3 -r mod user group location; do
		virtuallocation="$location"
		location="$syncrepo/files$location"
		if [[ -L "$location" || -e "$location" ]]; then
			#change ownership if values differ
			if [[ "$user:$group" != "$(stat --printf="%U:%G" "$location")" ]]; then
				chown --no-dereference --changes -- "$user:$group" "$location" >&9
				#adjust link to repo
				if is_indexed "$syncrepo/$linkindex" "$virtuallocation"; then
					chown --no-dereference --changes -- "$user:$group" "$virtuallocation" >&9
				fi
			fi
			#change permissions if they differ and not a symlink (link permissions cannot be changed)
			if [[ ! -L "$location" && "$mod" != "$(stat --printf="%04a" "$location")" ]]; then
				chmod --changes "$mod" "$location" >&9
			fi
		else
			errecho "$location not found, permission restore failed."
		fi
	done 3< "$syncrepo/$permfile"
}

function is_repo_clean {
	#are the no changes to permissions and/or files?
	cd "$syncrepo"
	#update permission index so git will detect this as a file change
	save_permissions
	if [[ -z "$(git status --porcelain)" ]]; then return 0; else return 1; fi
}

function check_repo_clean {
	#makes sure repository is in committed state
	if is_repo_clean; then
		return 0
	else
		errecho "[!] Aborting operation. Repository is not clean, see: $callname status"
		exit 1
	fi
}

function check_branch {
	#makes sure given branch is checked out
	local expectedbranch="$1"

	if [[ "$(cd "$syncrepo" && git symbolic-ref --short --quiet HEAD)" == "$expectedbranch" ]]; then
		return 0
	else
		errecho "[!] Aborting operation. Not on branch $expectedbranch as expected."
		exit 1
	fi
}


##############################################################
####################    SSYNC COMMANDS    ####################
##############################################################

function sync_setup {
	if [[ "$1" == "new" ]]; then
		echo "SYSTEMSYNC-REPO-CREATION"
		echo "########################"
		#create a repository containing the ssync structures and push it

		temprepo="$(mktemp -d)"
		cd "$temprepo"
		touch "$permfile" "$linkindex"
		git init .
		git branch "$syncbranch"
		git checkout "$syncbranch"
		git config user.name "ssync"
		git config user.email "ssync@localhost"
		if is_gpg_enabled; then
			git config user.signingkey "$gpgkey"
			git config commit.gpgsign true
		fi
		git add --all
		git commit -m "initialized ssync repository"
		git remote add central "$giturl"
		git push -u central "$syncbranch" || { errecho "Upload failed, aborting setup." && exit 1; }

		rm -r "$temprepo"
		cd "/"
	fi

	echo "SYSTEMSYNC-SETUP"
	echo "################"

	echo "Cloning sync repository..."
	if ! git clone --origin origin "$giturl" "$syncrepo"; then
		errecho "CLONE FAILED." && exit 1
	fi

	echo "Setting up hooks..."
	#these hooks trigger ssync fix on every working tree update which updates permissions and local files/links
	echo -e "#!/bin/bash\n$script_path fix" > "$syncrepo/.git/hooks/post-checkout"
	chmod u+x "$syncrepo/.git/hooks/post-checkout"
	cp "$syncrepo/.git/hooks/post-checkout" "$syncrepo/.git/hooks/post-merge"

	echo "Setting up local repository..."

	cd "$syncrepo"
	git config user.name "$gituser"
	git config user.email "$gitemail"
	git config push.default matching

	#Versioning files exactly as-is, apart from file mode (handled by permission restoration)
	git config core.autocrlf false
	git config core.whitespace ""
	git config core.fileMode false

	if is_gpg_enabled; then
		git config user.signingkey "$gpgkey"
		git config commit.gpgsign true
	fi

	gpg_check "origin/$syncbranch"
	git checkout "$syncbranch"
	git branch -u "origin/$syncbranch"
	git branch "$machinebranch"
	git checkout "$machinebranch"
	gpg_check "$machinebranch"

	echo "################"
	echo "Setup complete."
}

function sync_add {
	local passed="$1" target

	target="$syncrepo/files$passed"

	if is_in_repo "$passed"; then
		errecho "ERROR, already part of repository $syncrepo"
	elif has_child_in_repo "$passed"; then
		errecho "ERROR, child path already in repo"
	elif [[ -L "$passed" ]]; then
		errecho "ERROR, symlinks cannot be synced"
	elif [[ -e "$passed" && ( -d "$passed" || -f "$passed" ) ]]; then
		if [[ -d "$passed" ]]; then
			successmessage="Directory sync added."
		elif [[ -f "$passed" ]]; then
			successmessage="File sync added."
		fi

		rsync --recursive --links --perms --times --group --owner --relative --devices --specials --verbose "$passed/" "$syncrepo/files/" >&9 \
		&& rm --recursive --verbose -- "$passed" >&9 \
		&& echo "Relinking former location..." >&9 \
		&& add_clone_link "$target" "$passed" \
		&& chown --no-dereference --reference="$target" --verbose -- "$passed" >&9 \
		&& chmod --reference="$target" --changes -- "$passed" >&9 \
		&& add_to_index "$syncrepo/$linkindex" "$passed" \
		&& echo "$successmessage" >&9 \
		&& return 0
	else
		errecho "ERROR, source directory or file not found"
	fi
	return 1
}

function sync_rm {
	local passed="$1" repodata

	repodata="$syncrepo/files$passed"

	if ! is_indexed "$syncrepo/$linkindex" "$passed"; then
		errecho "ERROR, no repository link (see: $callname links)"
	elif [[ ! -L "$passed" ]]; then
		errecho "ERROR, no symlink encountered"
		errecho "WARNING: $syncrepo/$linkindex corrupt. Link missing!"
	else
		rm --verbose "$passed" >&9 \
		&& rsync --recursive --links --perms --times --group --owner --relative --devices --specials --verbose "$syncrepo/files/.$passed" "/" >&9 \
		&& rm -r --verbose "$repodata" >&9 \
		&& remove_from_index "$syncrepo/$linkindex" "$passed" \
		&& echo "Restored at original location." >&9 \
		&& return 0
	fi
	return 1
}

function sync_commit {
	cd "$syncrepo"
	save_permissions
	git add --all

	msg="ssync: $( git diff --staged --stat | tail -n1 )"
	if [[ ! -z "$1" ]]; then msg="$1"; fi
	git commit -m "$msg"
}

function sync_links {
	cat "$syncrepo/$linkindex"
}

function sync_status {
	local changes

	cd "$syncrepo"
	changes="$(git --no-pager diff "$linkindex" | grep -E "^[+-]/.+$" | LC_ALL=C sort)"
	if [[ -z "$changes" ]]; then
		if is_repo_clean; then
			echo "No uncommitted changes."
			return 0
		elif [[ "$(git status --porcelain)" =~ ^.." $permfile"$ ]]; then
			#if the only changes that git discovers are in the permission index:
			echo "There are uncommitted permission changes but no file changes."
			return 1
		else
			echo "There are uncommitted file changes. (for details: $callname git status)"
			return 1
		fi
	else
		echo -e "Links have changed:\n$changes"
		return 1
	fi
}

function sync_check {
	if is_in_repo "$1"; then
		echo "In ssync repository."
		return 0
	else
		echo "Not in repository."
		return 1
	fi
}

function sync_fix {
	local location target reallocation problems=0

	echo "Checking local repository against index..."
	while read -u 4 location; do
		target="$syncrepo/files$location"
		echo -n "$location => " >&9

		#Local path is a symlink, handle conflict if not pointing to repo
		if [[ -L "$location" ]]; then
			reallocation="$(realpath --quiet --canonicalize-missing "$location")"
			if [[ "$reallocation" == "$syncrepo/files/"* ]]; then
				echo "ok" >&9
			else
				echo "LINK CONFLICT!" >&9
				errecho "The indexed symlink is not pointing to the repository as expected: $location"
				if ask_confirm "Delete existing symlink and link to repository instead?"; then
					( rm -- "$location" && [[ ! -e "$location" ]] \
					&& add_clone_link "$target" "$location" ) \
					|| { errecho "Correcting link failed."; ((problems++)); }
				else ((problems++)); fi
			fi

		#otherwise confirm if existing contents can be removed
		elif [[ -e "$location" ]]; then
			echo "CONTENT CONFLICT!" >&9
			errecho "Symlink to repository expected but file/folder found: $location"
			if ask_confirm "Delete existing file/folder and link to repository instead?"; then
				( rm -r -i -- "$location" < /dev/tty && [[ ! -e "$location" ]] \
				&& add_clone_link "$target" "$location" ) \
				|| { errecho "Linking failed."; ((problems++)); }
			else ((problems++)); fi

		#last possibility: nothing present so simply add the missing link
		else
			echo "adding..." >&9
			echo "Restoring missing link: $location" \
			&& add_clone_link "$target" "$location" \
			|| { errecho "Adding link failed."; ((problems++)); }
		fi
	done 4<"$syncrepo/$linkindex"


	if (( $problems > 0 )); then
		errecho "[!] WARNING: $problems problem(s) unresolved and remaining. Re-run \"$callname fix\" to check again."
		return 1
	else
		#all links are in their correct place, therefore:
		restore_permissions

		echo "[i] Repository state clean."
		return 0
	fi
}

function sync_log {
	cd "$syncrepo" && git log --graph --abbrev-commit --decorate --date-order --date=relative --format=format:'%C(bold blue)%h %C(bold green)(%ar) %C(bold yellow)%d %C(white)%s %C(dim white)[%an]%C(reset)' --all
}

function sync_update {
	local verify
	if is_gpg_enabled; then verify="--verify-signatures"; fi

	if [[ -e "$syncrepo/.git/MERGE_HEAD" ]]; then
		errecho "[!] Merge not complete. Fix and run: $callname commit"
		return 1
	else
		#fetch sync branch, check signatures, update local pointer without checking out and finally merge in changes
		cd "$syncrepo" \
		&& git fetch origin \
		&& check_repo_clean \
		&& gpg_check "$machinebranch" \
		&& gpg_check "origin/$syncbranch" \
		&& git branch --quiet -f "$syncbranch" "origin/$syncbranch" \
		&& { git merge --ff $verify "$syncbranch" && echo "[i] Updated from central repository." && return 0 \
		     || { errecho "[!] Merge needs manual intervention. Do so and run: $callname commit" && return 1; }; } \
		|| { errecho "[!] Update failed." && return 1; }
	fi
}

function sync_publish {
	#update (pull+merge) and push - that's all!
	cd "$syncrepo" \
	&& echo "Updating..." \
	&& sync_update > /dev/null \
	&& echo "Publishing..." \
	&& gpg_check "$machinebranch" \
	&& git branch -f "$syncbranch" "$machinebranch" \
	&& git push origin "$syncbranch" \
	&& echo "[i] Published changes."
}

function sync_uninstall {
	echo "This will restore all the content that is currently controlled by ssync and delete the local repository ($syncrepo)."
	if ask_confirm "Are you ABSOLUTELY sure you want to do this?" && ask_confirm "Seriously, you understand the consequences and want to proceed?"; then
		if [[ -s "$syncrepo/$linkindex" ]]; then
			"$script_path" verbose rm $(cat "$syncrepo/$linkindex")
		fi
		if [[ -s "$syncrepo/$linkindex" ]]; then
			errecho "\n[!] Something went wrong. Aborting uninstall."
		else
			rm -r "$syncrepo" \
			&& echo "[i] Uninstall successful." \
			&& return 0
		fi
	fi
	return 1
}

function sync_reset {
	cd "$syncrepo"

	if ask_confirm "All uncommitted changes will be lost. Continue?"; then
		  added="$(git --no-pager diff "$linkindex" | grep --only-matching --color=never -P "^[+]\K/.+$")"
		removed="$(git --no-pager diff "$linkindex" | grep --only-matching --color=never -P "^[-]\K/.+$")"

		#Undo ssync add/rm since last commit
		if [[ ! -z "$added"   ]]; then
			echo -e "Added since commit:\n$added\nRestoring..."
			"$script_path" rm  $added
		fi
		if [[ ! -z "$removed" ]]; then
			echo -e "Removed since commit:\n$removed\nRelinking..."
			"$script_path" add $removed
		fi

		#If correctly undone reset git
		if ! is_index_changed; then
			echo "Resetting git..."
			git reset --hard "$machinebranch" \
			&& git checkout --quiet "$machinebranch" \
			&& echo "[i] Resetted to committed state." \
			&& return 0
		else
			errecho "[!] Reset not completed. Try again."
		fi
	fi
	return 1
}

### Actual execution ###
main "$@"

#Goodbye!
