#!/bin/bash

function errecho {
	echo -e "$1" 1>&2
}

if [[ $EUID -ne 0 ]]; then
	errecho "This must be run as root."
	exit 1
fi

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
if ( test ! -f "$DIR/settings.inc" ) || ( cmp -s "$DIR/settings.inc.template" "$DIR/settings.inc" >/dev/null ); then
	cp "$DIR/settings.inc.template" "$DIR/settings.inc"
	echo "Welcome to ssync!
A default configuration was copied to $DIR/settings.inc
Edit this file and restart this setup by using
    ssync setup
to pull the ssync repository from GITURL or even
    ssync setup new
for first use of this tool ever (this initializes a fresh repo and pushes it upstream)."
	exit 1
fi

source "$DIR/settings.inc"
PERMFILE="file-permissions"
LINKINDEX="ssync-linkindex"
PERMSCRIPT="${DIR}/git-preserve-permissions/git-preserve-permissions"


function usagehelp () {
	echo "USAGE: ssync setup [new]
       ssync [verbose] add /path/to/unversioned/file
       ssync [verbose] remove /path/to/versioned/file
       ssync [verbose] commit [message]
       ssync links
       ssync indexdiff
       ssync git ..."
}

function sync_setup {
	if [[ "$1" == "new" ]]; then
		echo "SYSTEMSYNC-REPO-CREATION"
		echo "########################"

		TEMPREPO=$(mktemp -d)
		cd "$TEMPREPO"
		touch "$PERMFILE" "$LINKINDEX"
		git init .
		git config user.name "ssync"
		git config user.email "ssync@localhost"
		git add --all
		git commit -m "initialized ssync repository"
		git remote add central "$GITURL"
		git push -u central master || ( errecho "Upload failed, aborting setup." && exit 1 )

		rm -r "$TEMPREPO"
	fi

	echo "SYSTEMSYNC-SETUP"
	echo "################"

	echo "Cloning permission saver..."
	cd "$DIR"
	if ! git clone https://github.com/dr4Ke/git-preserve-permissions "git-preserve-permissions"; then
		errecho "CLONE FAILED." && exit 1
	fi

	echo "Checking out tested revision..."
	cd git-preserve-permissions
	if ! git checkout -f 8bb161714cdc148214928e0115fd50fc407f0922; then
		errecho "CHECKOUT FAILED." && exit 1
	fi

	echo "Cloning system config repo..."
	if ! git clone "$GITURL" "$SYNCREPO"; then
		errecho "CLONE FAILED." && exit 1
	fi

	echo "Setting up local repository..."
	cd "$SYNCREPO"
	git config preserve-permissions.user true
	git config preserve-permissions.group true
	git config preserve-permissions.perms 0777
	git config preserve-permissions.file "$PERMFILE"
	git config user.name "$GITUSER"
	git config user.email "$GITEMAIL"
	git config push.default matching
	git checkout -f "$GITBRANCH"
	"$PERMSCRIPT" --restore

	echo "################"
	echo "Setup complete."
}

function is_indexed {
	MATCHES=$(grep --count --fixed-strings --line-regexp "$2" "$1")
	case "$MATCHES" in
		"0") return 42;;
		"1") return 0;;
		*) errecho "WARNING: $1 corrupt. Duplicate entries!"; return 0;;
	esac
}

function add_to_index {
	if is_indexed "$1" "$2"; then
		errecho "WARNING: Attempt to add already index entry to $1"
	else
		echo "$2" | sort -o "$1" - "$1"
	fi
}

function remove_from_index {
	if ! is_indexed "$1" "$2"; then
		errecho "WARNING: Attempt to remove non-indexed entry from $1"
	else
		cp -a "$1" "$1.tmp"
		grep --invert-match --fixed-strings --line-regexp "$2" "$1.tmp" > "$1"
		rm "$1.tmp"
	fi
}

function is_child_of {
	#resolve links
	CHILD=$(readlink -m "$1")
	PARENT=$(readlink -m "$2")
	
	#strip repo if currently synced
	CHILD="${CHILD##"$SYNCREPO/files"}"
	PARENT="${PARENT##"$SYNCREPO/files"}"

	#remove base from path and see if path has changed (check for starting slash to account for partial directory names having been removed)
	REDUCED="${CHILD##"$PARENT"}"
	if [[ "$REDUCED" != "$CHILD" ]] && [[ $REDUCED == /* ]]; then return 0; else return 1; fi
}

function is_in_repo {
	while read LINE; do
		echo -n "$LINE"
	done <"$SYNCREPO/$LINKINDEX"
}

function sync_add {
	PASSED="$1"
	TARGET="$SYNCREPO/files$PASSED"

	if [[ -e "$PASSED" && -e "$TARGET" ]]; then
		errecho "ERROR, already in repository $SYNCREPO"
	elif [[ -L "$PASSED" ]]; then
		errecho "ERROR, symlinks cannot be synced"
	elif [[ -e "$PASSED" && ( -d "$PASSED" || -f "$PASSED" ) ]]; then
		if [[ -d "$PASSED" ]]; then
			SUCCESSMESSAGE="Directory sync added."
		elif [[ -f "$PASSED" ]]; then
			SUCCESSMESSAGE="File sync added."
		fi

		OUTPUT=$( rsync --recursive --links --perms --times --group --owner --relative --devices --specials --verbose "$PASSED/" "$SYNCREPO/files/" \
			&& rm --recursive --verbose $PASSED \
			&& echo "Relinking former location..." \
			&& ln --symbolic "$TARGET" "$PASSED" \
			&& chown --no-dereference --reference="$TARGET" --verbose "$PASSED" \
			&& chmod --reference="$TARGET" --changes "$PASSED" \
			&& add_to_index "$SYNCREPO/$LINKINDEX" "$PASSED" \
			&& echo "$SUCCESSMESSAGE" )
	else
		errecho "ERROR, source directory or file not found"
	fi
}

function sync_remove {
	PASSED=$1
	REPODATA="$SYNCREPO/files$PASSED"

	if [[ "$PASSED" != /* || "$PASSED" == */ ]]; then
		errecho "Absolute path without trailing slash required!"
		exit 1
	fi

	if [[ -L "$PASSED" ]]; then
		if [[ -e "$REPODATA" ]]; then
			OUTPUT=$( rm --verbose "$PASSED" \
				&& rsync --recursive --links --perms --times --group --owner --relative --devices --specials --verbose "$SYNCREPO/files/.$PASSED" "/" \
				&& rm -r --verbose "$REPODATA" \
				&& remove_from_index "$SYNCREPO/$LINKINDEX" "$PASSED" \
				&& echo "Restored at original location." )
		else
			errecho "ERROR, is a symlink but not in repo"
		fi
	else
		errecho "ERROR, no symlink encountered"
	fi
}

function sync_commit {
	OUTPUT=$(
		cd "$SYNCREPO"
		git add --all
		"$PERMSCRIPT" --save --verbose
		git add "$PERMFILE"
		"$PERMSCRIPT" --save

		MSG="System update: $( git diff --staged --stat | tail -n1 )"
		if [[ ! -z "$1" ]]; then MSG="$1"; fi
		git commit -m "$MSG"
	)
}

function sync_show_index {
	cat "$SYNCREPO/$LINKINDEX"
}

function sync_indexdiff {
	cd "$SYNCREPO" && git --no-pager diff "$LINKINDEX" | grep -E "^[+-]/.+$" | LC_ALL=C sort
}


#MAIN FLOW

if [[ "$1" == "verbose" ]]; then
	shift
	VERBOSE="yes"
fi

MAINARG="$1"
shift

case "$MAINARG" in add|remove|commit|links|indexdiff|git) if [[ ! -e "$SYNCREPO/.git" ]]; then
	errecho "ERROR: Setup not completed."
	usagehelp && exit 1
fi;; esac

case "$MAINARG" in
	setup)
		sync_setup "$1";;
	add|remove)
		FULLPATH=$(realpath --quiet --canonicalize-missing --no-symlinks "$1")
		if [[ -z "$FULLPATH" ]]; then
			errecho "ERROR, no path given!"
			usagehelp && exit 1
		fi

		case "$MAINARG" in
			add) sync_add "$FULLPATH";;
			remove) sync_remove "$FULLPATH";;
		esac
		;;
	commit)
		sync_commit "$1";;
	links)
		sync_show_index;;
	indexdiff)
		sync_indexdiff;;
	git)
		case "$1" in
			add|rm|commit)
				errecho "Please use the designated ssync commands instead of git $1"
				usagehelp && exit 1
				;;
			mv|clean)
				errecho "You should avoid these commands to keep ssync working properly.\nIf you are sure about what you are doing, specify an override:\n    git override $1 ..."
				exit 1
				;;
			override)
				shift
				;;
			*)
				cd "$SYNCREPO" && git "$@"
				;;
		esac
		;;
	*)
		usagehelp;;
esac

if [[ "$VERBOSE" == "yes" ]]; then
	echo "$OUTPUT"
fi
#EOF
