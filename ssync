#!/bin/bash

function errecho {
	echo -e "$1" 1>&2
}

if [[ $EUID -ne 0 ]]; then
	errecho "This must be run as root."
	exit 1
fi


script="${BASH_SOURCE[0]}"
if [[ -L "$script" ]]; then script="$( readlink -ms "$script" )"; fi
dir="$( dirname "$script" )"

if ( test ! -f "$dir/settings.inc" ) || ( cmp -s "$dir/settings.inc.template" "$dir/settings.inc" >/dev/null ); then
	cp "$dir/settings.inc.template" "$dir/settings.inc"
	echo "Welcome to ssync!
A default configuration was copied to $dir/settings.inc
Edit this file and restart this setup by using
    ssync setup
to pull the ssync repository from GITURL or even
    ssync setup new
for first use of this tool ever (this initializes a fresh repo and pushes it upstream)."
	exit 1
fi

source "$dir/settings.inc"
permfile="ssync-file-permissions"
linkindex="ssync-linkindex"

function helphint {
	errecho " => ssync help"
}

function usagehelp () {
	echo "
USAGE: ssync [verbose] COMMAND

COMMANDS:
    setup [new]
          Initializes ssync. If settings file is not found a template is created
          and the user is prompted to edit it and execute this command again.
          Adding the \"new\" option creates the necessary repository structures
          and pushes them to an empty git repository with the specified GITURL,
          otherwise it is simply cloned.

    add PATH
          Move file or folder to repository to enable synchronization. This
          creates a symlink in its original place.

    rm PATH
          Unlink element in repository and restore original file/folder. It is
          not possible to remove children of a linked parent folder.

    check PATH
          Query if path is part of repository.

    status
          Display changes since last commit (added or removed entries).

    commit [MESSAGE]
          Bundle changes in a commit for synchronization.

    update
          Fetch latest changes from central repository and merge them.

    publish
          Publish local changes/merges. Automatically updates first.

    links
          List paths of all repository elements.

    uninstall
          Restore (see \"rm\" command) all contents and deletes local repository.

    git ...
          Pipe git command through to underlying git."
}

function gpg_enabled {
	if [[ ! -z "$gpgkey" ]]; then return 0; else return 1; fi
}

function gpg_check {
	local testedref="$1"

	if gpg_enabled; then
		echo -n "GPG check for $testedref... "
		if ! git verify-commit "$testedref" 2>&9; then
			errecho "\n########## GPG TRUST FAIL! ##########"
			exit 1
		else
			echo "ok"
		fi
	fi
	return 0
}

function sync_setup {
	if [[ "$1" == "new" ]]; then
		echo "SYSTEMSYNC-REPO-CREATION"
		echo "########################"

		temprepo="$(mktemp -d)"
		cd "$temprepo"
		touch "$permfile" "$linkindex"
		git init .
		git branch "$syncbranch"
		git checkout "$syncbranch"
		git config user.name "ssync"
		git config user.email "ssync@localhost"
		if gpg_enabled; then
			git config user.signingkey "$gpgkey"
			git config commit.gpgsign true
		fi
		git add --all
		git commit -m "initialized ssync repository"
		git remote add central "$giturl"
		git push -u central "$syncbranch" || { errecho "Upload failed, aborting setup." && exit 1; }

		rm -r "$temprepo"
	fi

	echo "SYSTEMSYNC-SETUP"
	echo "################"
	cd "$dir"

	echo "Cloning system config repo..."
	if ! git clone --origin origin "$giturl" "$syncrepo"; then
		errecho "CLONE FAILED." && exit 1
	fi

	echo "Setting up hooks..."
	echo -e "#!/bin/bash\n$dir/ssync fix" > "$syncrepo/.git/hooks/post-checkout"
	chmod u+x "$syncrepo/.git/hooks/post-checkout"
	cp "$syncrepo/.git/hooks/post-checkout" "$syncrepo/.git/hooks/post-merge"

	if [[ ! -z "$programlink" ]]; then
		echo "(Re)Linking in /usr/local/bin as $programlink..."
		rm "/usr/local/bin/$programlink" 2> /dev/null
		ln -s "$dir/ssync" "/usr/local/bin/$programlink"
	fi

	echo "Setting up local repository..."
	cd "$syncrepo"
	git config user.name "$gituser"
	git config user.email "$gitemail"
	git config push.default matching
	#Versioning files exactly as-is, apart from file (handled by permission restoration)
	git config core.autocrlf false
	git config core.whitespace ""
	git config core.fileMode false
	if gpg_enabled; then
		git config user.signingkey "$gpgkey"
		git config commit.gpgsign true
	fi
	gpg_check "origin/$syncbranch"
	git checkout "$syncbranch"
	git branch -u "origin/$syncbranch"
	git branch "$machinebranch"
	git checkout "$machinebranch"
	gpg_check "$machinebranch"

	echo "################"
	echo "Setup complete."
}

function is_indexed {
	local matches

	matches="$(grep --count --fixed-strings --line-regexp "$2" "$1")"
	case "$matches" in
		"0") return 42;;
		"1") return 0;;
		*) errecho "WARNING: $1 corrupt. Duplicate entries!"; return 0;;
	esac
}

function add_to_index {
	local indexfile="$1" location="$2"

	if is_indexed "$indexfile" "$location"; then
		errecho "WARNING: Attempt to add already index entry to $1"
	else
		echo "$location" | LC_ALL=C sort -o "$indexfile" - "$indexfile"
	fi
}

function remove_from_index {
	local indexfile="$1" location="$2"

	if ! is_indexed "$indexfile" "$location"; then
		errecho "WARNING: Attempt to remove non-indexed entry from $indexfile"
	else
		cp -a "$indexfile" "$indexfile.tmp"
		grep --invert-match --fixed-strings --line-regexp "$location" "$indexfile.tmp" > "$indexfile"
		rm "$indexfile.tmp"
	fi
}

function is_child_of {
	local child parent reduced

	#resolve links
	child="$(readlink -m "$1")"
	parent="$(readlink -m "$2")"
	
	#strip repo if currently synced
	child="${child##"$syncrepo/files"}"
	parent="${parent##"$syncrepo/files"}"

	#remove base from path and see if path has changed (check for starting slash to account for partial directory names having been removed)
	reduced="${child##"$parent"}"
	if [[ "$reduced" != "$child" ]] && [[ "$reduced" == /* ]]; then return 0; else return 1; fi
}

function is_in_repo {
	local tested="$1" line

	while read line; do
		if [[ "$tested" == "$line" ]] || is_child_of "$tested" "$line"; then return 0; fi
	done <"$syncrepo/$linkindex"
	return 1
}

function add_clone_link {
	local original="$1" link="$2"

	( echo -n "Creating link: " >&9 \
	&& ln --symbolic --verbose -- "$original" "$link" >&9 \
	&& chown --no-dereference --reference="$original" --verbose -- "$link" >&9 \
	&& chmod --reference="$original" --changes -- "$link" >&9 \
	&& return 0 ) || return 1
}

function sync_add {
	local passed="$1" target

	target="$syncrepo/files$passed"

	if is_in_repo "$passed"; then
		errecho "ERROR, already part of repository $syncrepo"
	elif [[ -L "$passed" ]]; then
		errecho "ERROR, symlinks cannot be synced"
	elif [[ -e "$passed" && ( -d "$passed" || -f "$passed" ) ]]; then
		if [[ -d "$passed" ]]; then
			successmessage="Directory sync added."
		elif [[ -f "$passed" ]]; then
			successmessage="File sync added."
		fi

		rsync --recursive --links --perms --times --group --owner --relative --devices --specials --verbose "$passed/" "$syncrepo/files/" >&9 \
		&& rm --recursive --verbose -- "$passed" >&9 \
		&& echo "Relinking former location..." >&9 \
		&& add_clone_link "$target" "$passed" \
		&& add_to_index "$syncrepo/$linkindex" "$passed" \
		&& echo "$successmessage" >&9
	else
		errecho "ERROR, source directory or file not found"
	fi
}

function sync_rm {
	local passed="$1" repodata

	repodata="$syncrepo/files$passed"

	if ! is_indexed "$syncrepo/$linkindex" "$passed"; then
		errecho "ERROR, no repository link (see: ssync links)"
	elif [[ ! -L "$passed" ]]; then
		errecho "ERROR, no symlink encountered"
		errecho "WARNING: $syncrepo/$linkindex corrupt. Link missing!"
	else
		rm --verbose "$passed" >&9 \
		&& rsync --recursive --links --perms --times --group --owner --relative --devices --specials --verbose "$syncrepo/files/.$passed" "/" >&9 \
		&& rm -r --verbose "$repodata" >&9 \
		&& remove_from_index "$syncrepo/$linkindex" "$passed" \
		&& echo "Restored at original location." >&9
	fi
}

function sync_commit {
	cd "$syncrepo"
	save_permissions
	git add --all

	msg="ssync: $( git diff --staged --stat | tail -n1 )"
	if [[ ! -z "$1" ]]; then msg="$1"; fi
	git commit -m "$msg"
}

function sync_show_index {
	cat "$syncrepo/$linkindex"
}

function is_index_changed {
	if [[ -z "$(cd "$syncrepo" && git status --porcelain "$linkindex")" ]]; then return 1; else return 0; fi
}

function sync_status {
	local changes

	cd "$syncrepo"
	changes="$(git --no-pager diff "$linkindex" | grep -E "^[+-]/.+$" | LC_ALL=C sort)"
	if [[ -z "$changes" ]]; then
		if [[ ! -z "$(git status --porcelain)" ]]; then
			echo "There are uncommitted file changes. (for details: ssync git status)"
			return 1
		elif ! is_repo_clean; then
			echo "There are uncommitted permission changes but no file changes."
			return 1
		else
			echo "No uncommitted changes."
			return 0
		fi
	else
		echo -e "Links have changed:\n$changes"
		return 1
	fi
}

function sync_check {
	if is_in_repo "$1"; then
		echo "In ssync repository."
	else
		echo "Not in repository."
	fi
}

function save_permissions {
	local line hit

	if [[ ! -e "$syncrepo/files" ]]; then return 0; fi
	while read line; do
		hit="${line##"$syncrepo/files"}"
		if is_in_repo "$hit"; then
			echo "$(stat --printf="%04a:%U:%G" "$line"):$hit"
		fi
	done < <(find "$syncrepo/files" -mindepth 1 | LC_ALL=C sort) > "$syncrepo/$permfile"
}

function restore_permissions {
	local mod user group location

	echo "Adjusting permissions..."
	while IFS=: read -r mod user group location; do
		location="$syncrepo/files$location"
		if [[ -e "$location" ]]; then
			if [[ "$user:$group" != "$(stat --printf="%U:%G" "$location")" ]]; then
				chown --changes -- "$user:$group" "$location" >&9
			fi
			if [[ "$mod" != "$(stat --printf="%04a" "$location")" ]]; then
				chmod --changes "$mod" "$location" >&9
			fi
		else
			errecho "$location not found, permission restore failed."
		fi
	done < "$syncrepo/$permfile"
}

function ask_confirm {
	local message="$1" answer

	while [[ ! "$answer" =~ ^[yYnN]$ ]]; do
		if ! read -r -n 1 -p "$message [y/n]: " -t 99 answer < /dev/tty; then
			answer="n"
			echo -n "$answer (chosen by timeout)"
		fi
		echo
	done

	if [[ "$answer" =~ ^[yY]$ ]]; then return 0; else return 1; fi
}

function sync_fix {
	local location target reallocation problems=0

	echo "Checking local repository against index..."
	while read -u 3 location; do
		target="$syncrepo/files$location"
		echo -n "$location => " >&9
		if [[ -L "$location" ]]; then
			reallocation="$(realpath --quiet --canonicalize-missing "$location")"
			if [[ "$reallocation" == "$syncrepo/files/"* ]]; then
				echo "ok" >&9
			else
				echo "LINK CONFLICT!" >&9
				errecho "The indexed symlink is not pointing to the repository as expected: $location"
				if ask_confirm "Delete existing symlink and link to repository instead?"; then
					( rm -- "$location" \
					&& add_clone_link "$target" "$location" ) \
					|| { errecho "Correcting link failed."; ((problems++)); }
				else ((problems++)); fi
			fi
		elif [[ -e "$location" ]]; then
			echo "CONTENT CONFLICT!" >&9
			errecho "Symlink to repository expected but file/folder found: $location"
			if ask_confirm "Delete existing file/folder and link to repository instead?"; then
				( rm -r -i -- "$location" < /dev/tty && [[ ! -e "$location" ]] \
				&& add_clone_link "$target" "$location" ) \
				|| { errecho "Linking failed."; ((problems++)); }
			else ((problems++)); fi
		else
			echo "adding..." >&9
			echo "Restoring missing link: $location" \
			&& add_clone_link "$target" "$location" \
			|| { errecho "Adding link failed."; ((problems++)); }
		fi
	done 3<"$syncrepo/$linkindex"

	restore_permissions

	if (( $problems > 0 )); then
		errecho "[!] WARNING: $problems problem(s) unresolved and remaining. Re-run \"ssync fix\" to check again."
		return 1
	else
		echo "[i] Repository state clean."
		return 0
	fi
}

function sync_log {
	cd "$syncrepo" && git log --graph --abbrev-commit --decorate --date-order --date=relative --format=format:'%C(bold blue)%h %C(bold green)(%ar) %C(bold yellow)%d %C(white)%s %C(dim white)[%an]%C(reset)' --all
}

function is_repo_clean {
	cd "$syncrepo"
	save_permissions
	if [[ -z "$(git status --porcelain)" ]]; then return 0; else return 1; fi
}

function check_repo_clean {
	if is_repo_clean; then
		return 0
	else
		errecho "[!] Aborting operation. Repository is not clean, see: ssync status"
		exit 1
	fi
}

function sync_update {
	local verify
	if gpg_enabled; then verify="--verify-signatures"; fi

	if [[ -e "$syncrepo/.git/MERGE_HEAD" ]]; then
		errecho "[!] Merge not complete. Fix and run: ssync commit"
		return 1
	else
		cd "$syncrepo" \
		&& git fetch origin \
		&& check_repo_clean \
		&& git checkout --quiet "$machinebranch" \
		&& gpg_check "$machinebranch" \
		&& gpg_check "origin/$syncbranch" \
		&& git branch --quiet -f "$syncbranch" "origin/$syncbranch" \
		&& { git merge --ff $verify "$syncbranch" && echo "[i] Updated from central repository." && return 0; } \
		|| { errecho "[!] Merge needs manual intervention. Do so and run: ssync commit" && return 1; }
	fi
}

function sync_publish {
	cd "$syncrepo" \
	&& echo "Updating..." \
	&& sync_update > /dev/null \
	&& echo "Publishing..." \
	&& gpg_check "$machinebranch" \
	&& git branch -f "$syncbranch" "$machinebranch" \
	&& git push origin "$syncbranch" \
	&& echo "[i] Published changes."
}

function sync_uninstall {
	echo "This will restore all the content that is currently controlled by ssync and delete the local repository ($syncrepo)."
	if ask_confirm "Are you ABSOLUTELY sure you want to do this?" && ask_confirm "Seriously, you understand the consequences and want to proceed?"; then
		if [[ -s "$syncrepo/$linkindex" ]]; then
			"$script" verbose rm $(cat "$syncrepo/$linkindex")
		fi
		if [[ -s "$syncrepo/$linkindex" ]]; then
			errecho "\n[!] Something went wrong. Aborting uninstall."
		else
			rm -r "$syncrepo" \
			&& echo "[i] Uninstall successful."
		fi
	fi
}

function check_branch {
	local expectedbranch="$1"

	if [[ "$(git symbolic-ref --short --quiet HEAD)" == "$expectedbranch" ]]; then
		return 0
	else
		errecho "[!] Aborting operation. Not on branch $expectedbranch as expected."
		exit 1
	fi
}

function sync_reset {
	cd "$syncrepo"
	check_branch "$machinebranch"

	if ask_confirm "All uncommitted changes will be lost. Continue?"; then
		  added="$(git --no-pager diff "$linkindex" | grep --only-matching --color=never -P "^[+]\K/.+$")"
		removed="$(git --no-pager diff "$linkindex" | grep --only-matching --color=never -P "^[-]\K/.+$")"

		if [[ ! -z "$added"   ]]; then
			echo -e "Added since commit:\n$added\nRestoring..."
			"$script" rm  $added
		fi
		if [[ ! -z "$removed" ]]; then
			echo -e "Removed since commit:\n$removed\nRelinking..."
			"$script" add $removed
		fi

		if ! is_index_changed; then
			echo "Resetting git..."
			git reset --hard "$machinebranch" \
			&& git checkout --quiet "$machinebranch" \
			&& echo "[i] Resetted to committed state."
		else
			errecho "[!] Reset not completed. Try again."
		fi
	fi
}


#MAIN FLOW

#file descriptor #9 is our verbose output, all superfluous information goes there
if [[ "$1" == "verbose" ]]; then
	shift
	exec 9>&1
else
	exec 9>/dev/null
fi

mainarg="$1"
shift

if [[ "$mainarg" != "help" && "$mainarg" != "setup" && ! -e "$syncrepo/.git" ]]; then
	errecho "ERROR: Setup not completed."
	helphint && exit 1
fi

case "$mainarg" in
	setup)
		sync_setup "$1";;
	uninstall)
		sync_uninstall;;
	fix)
		sync_fix;;
	add|rm|check)
		while : ; do
			#calculate resolved non-repo path
			fullpath="$(realpath --quiet --canonicalize-missing --no-symlinks "$1")"
			fullpath="${fullpath##"$syncrepo/files"}"

			if [[ -z "$fullpath" ]]; then
				errecho "ERROR, no path given!"
				helphint && exit 1
			fi

			case "$mainarg" in
				add) sync_add "$fullpath";;
				rm) sync_rm "$fullpath";;
				check) sync_check "$fullpath";;
			esac
			shift
			[[ "$1" ]] || break
		done
		;;
	commit)
		sync_commit "$1";;
	links)
		sync_show_index;;
	status)
		sync_status;;
	log)
		sync_log;;
	update)
		sync_update;;
	publish)
		sync_publish;;
	reset)
		sync_reset;;
	git)
		case "$1" in
			override)
				shift
				git "$@"
				;;
			diff|log|shortlog|show|status)
				cd "$syncrepo" && git "$@"
				;;
			*)
				errecho "AVOID THESE GIT COMMANDS TO KEEP SSYNC WORKING PROPERLY.\nUse the designated ssync commands instead:"
				helphint
				errecho "If you are absolutely sure about what you are doing:\n    ssync git override $1 ..."
				exit 1
				;;
		esac
		;;
	*)
		usagehelp;;
esac

#End Of Script :)
