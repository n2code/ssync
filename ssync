#!/bin/bash
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "${DIR}"

if [[ $EUID -ne 0 ]]; then
	echo "This must be run as root." 1>&2
	exit 1
fi

function usagehelp () {
	echo "USAGE: ssync setup"
	echo "       ssync add /path/to/unversioned/file"
}

if [[ ! -f "settings.inc" ]]; then
	cp "settings.inc.template" "settings.inc"
	echo "Created default configuration in ${DIR}/settings.inc"
	echo "Edit this file and restart this setup: ssync setup"
	exit 1
fi

source "${DIR}/settings.inc"

if [[ "$1" == "setup" ]]; then
	echo "SYSTEMSYNC-SETUP"
	echo "################"

	echo "Cloning permission saver..."
	git clone https://github.com/dr4Ke/git-preserve-permissions

	echo "Checking out tested revision..."
	cd git-preserve-permissions
	if ! git checkout -f 8bb161714cdc148214928e0115fd50fc407f0922; then
		echo "CHECKOUT FAILED." && exit 1
	fi

	echo "Linking preserve-permissions..."
	ln -s "${DIR}/git-preserve-permissions/git-preserve-permissions" "/usr/local/bin/git-preserve-permissions"

	echo "Cloning system config repo..."
	git clone "$GITURL" "$SYNCREPO"

	echo "Installing hook(s)..."
	cp post-checkout "$SYNCREPO/.git/hooks/"

	echo "Setting up local repository..."
	cd "$SYNCREPO"
	git config preserve-permissions.user true
	git config preserve-permissions.group true
	git config preserve-permissions.perms 0777
	git config user.name "$GITUSER"
	git config user.email "$GITEMAIL"
	git config push.default matching
	git checkout -f "$GITBRANCH"

	echo "################"
	echo "Setup complete."

elif [[ "$1" == "add" ]]; then
	shift

	OPTION=""
	if [[ $1 == "nolink" ]]; then
		OPTION="nolink"
		shift
	fi

	PASSED=$1
	TARGET=$SYNCREPO$PASSED

	if [[ $PASSED != /* || $PASSED == */ ]]; then
		echo "Absolute path without trailing slash required!" 1>&2
		exit 1
	fi

	STATUS="ERROR, command failed on request:"
	if [[ -e $PASSED ]]; then
		if [[ -d $PASSED ]]; then
			if [[ $OPTION == "nolink" ]]; then
				rsync --dirs --links --perms --times --group --owner "$PASSED/" "$TARGET" \
				&& STATUS="Directory added without link:"
			else
				rsync --recursive --links --perms --times --group --owner --devices --specials --verbose "$PASSED/" "$TARGET" \
				&& rm --recursive --verbose $PASSED \
				&& echo "Relinking former location..." \
				&& ln --symbolic "$TARGET" "$PASSED" \
				&& chown --no-dereference --reference="$TARGET" --changes "$PASSED" \
				&& chmod --reference="$TARGET" --changes "$PASSED" \
				&& STATUS="Directory sync added:"
			fi
		elif [[ -f $PASSED ]]; then
			rsync --links --perms --times --group --owner --devices --specials --verbose "$PASSED" "$TARGET" \
			&& rm --verbose $PASSED \
			&& echo "Relinking former location..." \
			&& ln --symbolic "$TARGET" "$PASSED" \
			&& chown --no-dereference --reference="$TARGET" --changes "$PASSED" \
			&& chmod --reference="$TARGET" --changes "$PASSED" \
			&& STATUS="File sync added:"
			STATUS="File sync added:"
		else
			STATUS="ERROR, no directory or file:"
		fi
	else
		STATUS="ERROR, does not exist:"
	fi
	echo "####################"
	echo "$STATUS"
	echo "$PASSED -> $TARGET"

else
	usagehelp
fi

#EOF
