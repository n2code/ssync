#!/bin/bash
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "${DIR}"

if [[ $EUID -ne 0 ]]; then
	echo "This must be run as root." 1>&2
	exit 1
fi

function usagehelp () {
	echo "USAGE: ssync setup"
	echo "       ssync [verbose] add /path/to/unversioned/file"
	echo "       ssync [verbose] remove /path/to/versioned/file"
	echo "       ssync [verbose] commit"
}

if [[ ! -f "settings.inc" ]]; then
	cp "settings.inc.template" "settings.inc"
	echo "Created default configuration in ${DIR}/settings.inc"
	echo "Edit this file and restart this setup: ssync setup"
	exit 1
fi

source "${DIR}/settings.inc"

if [[ "$1" == "verbose" ]]; then
	shift
	VERBOSE="yes"
fi


if [[ "$1" == "setup" ]]; then
	echo "SYSTEMSYNC-SETUP"
	echo "################"

	echo "Cloning permission saver..."
	git clone https://github.com/dr4Ke/git-preserve-permissions

	echo "Checking out tested revision..."
	cd git-preserve-permissions
	if ! git checkout -f 8bb161714cdc148214928e0115fd50fc407f0922; then
		echo "CHECKOUT FAILED." && exit 1
	fi

	echo "Linking preserve-permissions..."
	ln -s "${DIR}/git-preserve-permissions/git-preserve-permissions" "/usr/local/bin/git-preserve-permissions"

	echo "Cloning system config repo..."
	git clone "$GITURL" "$SYNCREPO"

	echo "Installing hook(s)..."
	cp post-checkout "$SYNCREPO/.git/hooks/"

	echo "Setting up local repository..."
	cd "$SYNCREPO"
	git config preserve-permissions.user true
	git config preserve-permissions.group true
	git config preserve-permissions.perms 0777
	git config preserve-permissions.file "file-permissions"
	git config user.name "$GITUSER"
	git config user.email "$GITEMAIL"
	git config push.default matching
	git checkout -f "$GITBRANCH"

	echo "################"
	echo "Setup complete."


elif [[ "$1" == "add" ]]; then
	shift

	PASSED=$1
	TARGET="$SYNCREPO/files$PASSED"

	if [[ $PASSED != /* || $PASSED == */ ]]; then
		echo "Absolute path without trailing slash required!" 1>&2
		exit 1
	fi

	if [[ -e $PASSED && -e $TARGET ]]; then
		echo "ERROR, already in repository $SYNCREPO" 1>&2
	elif [[ -e $PASSED && ( -d $PASSED || -f $PASSED ) ]]; then
		if [[ -d $PASSED ]]; then
			SUCCESSMESSAGE="Directory sync added."
		elif [[ -f $PASSED ]]; then
			SUCCESSMESSAGE="File sync added."
		fi

		OUTPUT=$( rsync --recursive --links --perms --times --group --owner --relative --devices --specials --verbose "$PASSED/" "$SYNCREPO/files/" \
			&& rm --recursive --verbose $PASSED \
			&& echo "Relinking former location..." \
			&& ln --symbolic "$TARGET" "$PASSED" \
			&& chown --no-dereference --reference="$TARGET" --verbose "$PASSED" \
			&& chmod --reference="$TARGET" --changes "$PASSED" \
			&& echo "$SUCCESSMESSAGE" )
	else
		echo "ERROR, directory or file not found: $PASSED" 1>&2
	fi


elif [[ "$1" == "remove" ]]; then
	shift

	PASSED=$1
	REPODATA="$SYNCREPO/files$PASSED"

	if [[ $PASSED != /* || $PASSED == */ ]]; then
		echo "Absolute path without trailing slash required!" 1>&2
		exit 1
	fi

	STATUS="ERROR, command failed on request:"
	if [[ -L $PASSED ]]; then
		if [[ -e $REPODATA ]]; then
			OUTPUT=$( rm --verbose "$PASSED" \
				&& rsync --recursive --links --perms --times --group --owner --relative --devices --specials --verbose "$SYNCREPO/files/.$PASSED" "/" \
				&& rm -r --verbose "$REPODATA" \
				&& echo "Restored at original location." )
		else
			echo "ERROR, is a symlink but not in repo: $PASSED" 1>&2
		fi
	else
		echo "ERROR, no symlink: $PASSED" 1>&2
	fi


elif [[ "$1" == "commit" ]]; then
	shift

	OUTPUT=$(
		cd "$SYNCREPO"
		git add --all
		git preserve-permissions --save --verbose
		git add "file-permissions"
		git preserve-permissions --save

		MSG="System update: $( git diff --staged --stat | tail -n1 )"
		if [[ "$1" != "" ]]; then MSG="$1"; fi
		git commit -m "$MSG"
	)


else
	usagehelp
fi


if [[ "$VERBOSE" == "yes" ]]; then
	echo "$OUTPUT"
fi
#EOF
