#!/bin/bash

function errecho {
	echo "$1" 1>&2
}

if [[ $EUID -ne 0 ]]; then
	errecho "This must be run as root."
	exit 1
fi

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
if [[ ! -f "$DIR/settings.inc" ]]; then
	cp "$DIR/settings.inc.template" "$DIR/settings.inc"
	echo "Created default configuration in $DIR/settings.inc"
	echo "Edit this file and restart this setup: ssync setup [new]"
	exit 1
fi

source "$DIR/settings.inc"
PERMFILE="file-permissions"
INDEXFILE="ssync-index"
PERMSCRIPT="${DIR}/git-preserve-permissions/git-preserve-permissions"


function usagehelp () {
	echo "USAGE: ssync setup [new]"
	echo "       ssync [verbose] add /path/to/unversioned/file"
	echo "       ssync [verbose] remove /path/to/versioned/file"
	echo "       ssync [verbose] commit"
}

function sync_setup {
	if [[ "$1" == "new" ]]; then
		echo "SYSTEMSYNC-REPO-CREATION"
		echo "########################"

		TEMPREPO=$(mktemp -d)
		cd "$TEMPREPO"
		touch "$PERMFILE" "$INDEXFILE"
		git init .
		git config user.name "ssync"
		git config user.email "ssync@localhost"
		git add --all
		git commit -m "initialized ssync repository"
		git remote add central "$GITURL"
		git push -u central master || ( errecho "Upload failed, aborting setup." && exit 1 )

		rm -r "$TEMPREPO"
	fi

	echo "SYSTEMSYNC-SETUP"
	echo "################"

	echo "Cloning permission saver..."
	cd "$DIR"
	if ! git clone https://github.com/dr4Ke/git-preserve-permissions "git-preserve-permissions"; then
		errecho "CLONE FAILED." && exit 1
	fi

	echo "Checking out tested revision..."
	cd git-preserve-permissions
	if ! git checkout -f 8bb161714cdc148214928e0115fd50fc407f0922; then
		errecho "CHECKOUT FAILED." && exit 1
	fi

	echo "Cloning system config repo..."
	if ! git clone "$GITURL" "$SYNCREPO"; then
		errecho "CLONE FAILED." && exit 1
	fi

	echo "Installing hook(s)..."
	cp post-checkout "$SYNCREPO/.git/hooks/"

	echo "Setting up local repository..."
	cd "$SYNCREPO"
	git config preserve-permissions.user true
	git config preserve-permissions.group true
	git config preserve-permissions.perms 0777
	git config preserve-permissions.file "$PERMFILE"
	git config user.name "$GITUSER"
	git config user.email "$GITEMAIL"
	git config push.default matching
	git checkout -f "$GITBRANCH"

	echo "################"
	echo "Setup complete."
}

function sync_add {
	PASSED="$1"
	TARGET="$SYNCREPO/files$PASSED"

	if [[ "$PASSED" != /* || "$PASSED" == */ ]]; then
		errecho "Absolute path without trailing slash required!"
		exit 1
	fi

	if [[ -e "$PASSED" && -e "$TARGET" ]]; then
		errecho "ERROR, already in repository $SYNCREPO"
	elif [[ -e "$PASSED" && ( -d "$PASSED" || -f "$PASSED" ) ]]; then
		if [[ -d "$PASSED" ]]; then
			SUCCESSMESSAGE="Directory sync added."
		elif [[ -f "$PASSED" ]]; then
			SUCCESSMESSAGE="File sync added."
		fi

		OUTPUT=$( rsync --recursive --links --perms --times --group --owner --relative --devices --specials --verbose "$PASSED/" "$SYNCREPO/files/" \
			&& rm --recursive --verbose $PASSED \
			&& echo "Relinking former location..." \
			&& ln --symbolic "$TARGET" "$PASSED" \
			&& chown --no-dereference --reference="$TARGET" --verbose "$PASSED" \
			&& chmod --reference="$TARGET" --changes "$PASSED" \
			&& echo "$SUCCESSMESSAGE" )
	else
		errecho "ERROR, source directory or file not found"
	fi
}

function sync_remove {
	PASSED=$1
	REPODATA="$SYNCREPO/files$PASSED"

	if [[ "$PASSED" != /* || "$PASSED" == */ ]]; then
		errecho "Absolute path without trailing slash required!"
		exit 1
	fi

	if [[ -L "$PASSED" ]]; then
		if [[ -e "$REPODATA" ]]; then
			OUTPUT=$( rm --verbose "$PASSED" \
				&& rsync --recursive --links --perms --times --group --owner --relative --devices --specials --verbose "$SYNCREPO/files/.$PASSED" "/" \
				&& rm -r --verbose "$REPODATA" \
				&& echo "Restored at original location." )
		else
			errecho "ERROR, is a symlink but not in repo"
		fi
	else
		errecho "ERROR, no symlink encountered"
	fi
}

function sync_commit {
	OUTPUT=$(
		cd "$SYNCREPO"
		git add --all
		"$PERMSCRIPT" --save --verbose
		git add "$PERMFILE"
		"$PERMSCRIPT" --save

		MSG="System update: $( git diff --staged --stat | tail -n1 )"
		if [[ "$1" != "" ]]; then MSG="$1"; fi
		git commit -m "$MSG"
	)
}


#MAIN FLOW

if [[ "$1" == "verbose" ]]; then
	shift
	VERBOSE="yes"
fi

MAINARG="$1"
shift

case "$MAINARG" in
	 setup) sync_setup "$1";;
	   add) sync_add "$1";;
	remove) sync_remove "$1";;
	commit) sync_commit;;
	*)      usagehelp;;
esac

if [[ "$VERBOSE" == "yes" ]]; then
	echo "$OUTPUT"
fi
#EOF
